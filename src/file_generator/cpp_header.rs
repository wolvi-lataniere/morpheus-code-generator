use crate::yaml_parser;
use std::fs::File;
use std::io::{self, Write};
use std::vec::Vec;

use crate::file_generator::FileGenerator;

const FILE_HEADER: &str = r#"
// This file is autogenerated, please do not edit manually
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stdlib.h>

"#;

pub struct CppHeaderGenerator {
    file: Box<dyn Write>,
}

impl FileGenerator for CppHeaderGenerator {
    fn build_file(&mut self, codes: &yaml_parser::CodesFile) -> Result<(), io::Error> {
        self.write_header()?;

        self.write_enumerations(codes.codes.iter().collect())?;

        codes
            .codes
            .iter()
            .for_each(|(_, c)| self.create_parameters_structure(&c.instruction, &c.name, "inst"));

        codes
            .codes
            .iter()
            .for_each(|(_, c)| self.create_parameters_structure(&c.feedback, &c.name, "fb"));

        codes.codes.iter().for_each(|(_k, code)| {
            if code.feedback.is_some() {
                self.file
                    .write_all(
                        format!(
                            r#"
int build_feedback_{}_frame(char* buffer, int *len, struct s_fb_{}_params* parameters);
"#,
                            code.name.to_lowercase(),
                            code.name.to_lowercase()
                        )
                        .as_bytes(),
                    )
                    .unwrap();
            }
            if code.instruction.is_some() {
                self.file
                    .write_all(
                        format!(
                            r#"
int build_instruction_{}_frame(char* buffer, int *len, struct s_inst_{}_params* parameters);
"#,
                            code.name.to_lowercase(),
                            code.name.to_lowercase()
                        )
                        .as_bytes(),
                    )
                    .unwrap();
            }
        });

        self.write_footer()?;
        self.file.flush()?;

        Ok(())
    }
}

impl CppHeaderGenerator {
    pub fn new(header_file_name: &String) -> Result<Self, io::Error> {
        Ok(CppHeaderGenerator {
            file: Box::new(File::create(header_file_name)?),
        })
    }

    fn write_header(&mut self) -> Result<(), io::Error> {
        self.file.write_all(FILE_HEADER.as_bytes())?;
        Ok(())
    }

    fn write_enumerations(
        &mut self,
        parameters: Vec<(&u32, &yaml_parser::Codes)>,
    ) -> Result<(), io::Error> {
        self.write_enumerations_header("Instructions")?;
        self.file.write_all(
            self.get_formatted_enumeration_codes(&parameters, "INST", |c| c.instruction.is_some())
                .as_bytes(),
        )?;
        self.write_enumerations_footer("Instructions")?;

        self.write_enumerations_header("Feedbacks")?;
        self.file.write_all(
            self.get_formatted_enumeration_codes(&parameters, "FB", |c| c.feedback.is_some())
                .as_bytes(),
        )?;
        self.write_enumerations_footer("Feedbacks")?;

        Ok(())
    }

    fn write_footer(&mut self) -> Result<(), io::Error> {
        self.file.write_all(
            r#"

// External parsing functions
extern int parse_feedback_frame(char* buffer, int len, Feedbacks* code, void **parameters);
extern int parse_instruction_frame(char* buffer, int len, Instructions* code, void **parameters);"#
                .as_bytes(),
        )?;
        Ok(())
    }

    fn get_formatted_enumeration_codes<F>(
        &self,
        parameters: &Vec<(&u32, &yaml_parser::Codes)>,
        prefix: &str,
        filter: F,
    ) -> String
    where
        F: Fn(&yaml_parser::Codes) -> bool,
    {
        parameters
            .iter()
            .filter_map(|(instruction_code, code)| {
                if filter(code) {
                    Some(format!(
                        "{}_{} = {}",
                        prefix,
                        code.name.to_uppercase(),
                        instruction_code
                    ))
                } else {
                    None
                }
            })
            .collect::<Vec<String>>()
            .join(",\n\t")
    }

    fn write_enumerations_header(&mut self, enumeration_name: &str) -> Result<(), io::Error> {
        self.file.write_all(
            format!(
                r#"
// {} Codes list
typedef enum __{}_enum {{
    "#,
                enumeration_name,
                enumeration_name.to_lowercase()
            )
            .as_bytes(),
        )
    }

    fn write_enumerations_footer(&mut self, enumeration_name: &str) -> Result<(), io::Error> {
        self.file.write_all(
            format!(
                r#"
}} {enumeration_name};

"#
            )
            .as_bytes(),
        )
    }

    fn create_parameters_structure(
        &mut self,
        parameters: &Option<yaml_parser::InstFeedback>,
        name: &str,
        struct_type: &str,
    ) {
        if let Some(inst) = &parameters {
            self.file
                .write_all(
                    format!(
                        r#"
struct s_{}_{}_params {{
    {}
}};
"#,
                        struct_type,
                        name.to_lowercase(),
                        inst.parameters
                            .iter()
                            .map(|p| { p.c_parameter_definition_with_comment() })
                            .collect::<Vec<String>>()
                            .join("\n\t")
                    )
                    .as_bytes(),
                )
                .unwrap();
        }
    }
}
